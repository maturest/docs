(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{324:function(a,t,v){"use strict";v.r(t);var s=v(14),_=Object(s.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"python-中的数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#python-中的数据类型"}},[a._v("#")]),a._v(" python 中的数据类型")]),a._v(" "),t("p",[a._v("数字类型、字符串类型、布尔类型、空类型、列表类型、元组类型、字典类型")]),a._v(" "),t("h1",{attrs:{id:"数字类型及其应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数字类型及其应用"}},[a._v("#")]),a._v(" 数字类型及其应用")]),a._v(" "),t("p",[a._v("整型，浮点型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("num1 = int(100)\nnum2 = 100\n\nnum3 = float(3.14)\nnum4 = 3.14\n")])])]),t("p",[a._v("type 函数返回变量的类型")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("count = 100\nprint(type(count))\n")])])]),t("h1",{attrs:{id:"字符串类型及其应用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串类型及其应用"}},[a._v("#")]),a._v(" 字符串类型及其应用")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("str = str('abc')\nstr1 = 'abc'\n")])])]),t("p",[a._v("字符串不可改变")]),a._v(" "),t("p",[a._v("内置函数 id 返回变量的内存地址")]),a._v(" "),t("p",[a._v("内置函数 len 返回字符串的长度，无法返回数字类型的长度，因为数字类型没有长度。")]),a._v(" "),t("p",[a._v("内置成员运算符 in 的使用")]),a._v(" "),t("p",[a._v("max 函数返回数据中最大的成员，中文字符 > 字母 > 数字 > 英文符号")]),a._v(" "),t("p",[a._v("min 函数返回数据中最小的成员")]),a._v(" "),t("p",[a._v("字符串的累加\n字符串拼接用 "),t("code",[a._v("+")])]),a._v(" "),t("h1",{attrs:{id:"布尔类型与空类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#布尔类型与空类型"}},[a._v("#")]),a._v(" 布尔类型与空类型")]),a._v(" "),t("p",[a._v("0 => false\n0.0 => false\n'' => false\nNone => false\n[] => false\n() => false\n{} => false")]),a._v(" "),t("h1",{attrs:{id:"列表类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列表类型"}},[a._v("#")]),a._v(" 列表类型")]),a._v(" "),t("p",[a._v("列表就是队列，是各种数据类型的集合，也是一种数据结构，是一种有序，且内容可重复的集合类型。虽然是一个无限长度的数据结构，但避免出现长度过长。")]),a._v(" "),t("p",[a._v("怎么定义：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("name1 = list(['张三', '李四', '王二'])\nname2 = ['张三', '李四', '王二']\n")])])]),t("p",[a._v("max,min在列表中使用的话，列表中的元素类型要统一。")]),a._v(" "),t("h1",{attrs:{id:"元组类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元组类型"}},[a._v("#")]),a._v(" 元组类型")]),a._v(" "),t("p",[a._v("元组与列表一样，都是一种可以存储多种数据结构的队列")]),a._v(" "),t("p",[a._v("元组也是一个有序的，且元素可以重复的集合")]),a._v(" "),t("p",[a._v("定义：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("names = tuple(('张三','李四'))\nnames = ('张三','李四')\nnames = ('张三',) # 一个成员的时候，要带逗号，当不加逗号的时候，该变量的类型就是该成员的类型。\n")])])]),t("p",[a._v("列表与元组的区别：")]),a._v(" "),t("ul",[t("li",[a._v("元组比列表占用资源更小")]),a._v(" "),t("li",[a._v("列表是可变的，元组是不可变的")])]),a._v(" "),t("h1",{attrs:{id:"字典"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字典"}},[a._v("#")]),a._v(" 字典")]),a._v(" "),t("p",[a._v("定义：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("a = dict()\na = {}\nperson = {'name': '张三', 'age': 23}\n")])])]),t("p",[a._v("key 支持字符串，数字，元组，但列表是不支持的")]),a._v(" "),t("p",[a._v("注意以上列表、元组，字典的书写规范。")]),a._v(" "),t("h1",{attrs:{id:"赋值与比较运算符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#赋值与比较运算符"}},[a._v("#")]),a._v(" 赋值与比较运算符")]),a._v(" "),t("p",[a._v("赋值运算符")]),a._v(" "),t("ul",[t("li",[a._v("=")]),a._v(" "),t("li",[a._v("+=")]),a._v(" "),t("li",[a._v("-=")]),a._v(" "),t("li",[a._v("*=")]),a._v(" "),t("li",[a._v("/=")]),a._v(" "),t("li",[a._v("%=")]),a._v(" "),t("li",[a._v("**=")]),a._v(" "),t("li",[a._v("//=")])]),a._v(" "),t("p",[a._v("字符串，列表，元组是可以使用乘法的，但字典是不可以的")]),a._v(" "),t("p",[a._v("比较运算符")]),a._v(" "),t("ul",[t("li",[a._v("==")]),a._v(" "),t("li",[a._v("!=")]),a._v(" "),t("li",[t("blockquote")]),a._v(" "),t("li",[a._v("<")]),a._v(" "),t("li",[t("blockquote",[t("p",[a._v("=")])])]),a._v(" "),t("li",[a._v("<=")]),a._v(" "),t("li",[a._v("<>")]),a._v(" "),t("li",[a._v("is 判断两个对象存储单元是否相同")]),a._v(" "),t("li",[a._v("is not 判断两个对象存储单元是否不同\n存储单元就是我们之前讲的 内存块")])]),a._v(" "),t("p",[a._v("有趣的现象：\n在终端使用 python 解释器的时候，会事先将 0-256 之间的数字分配到内存当中，当 a,b = 200,200,此时 a is b 返回 true。当 a,b = 257,257 的时候，a is b 返回 false。")]),a._v(" "),t("p",[a._v("在脚本中，代码是从上至下执行的，a,b = 200,200，此时 a is b 返回的结果是 True。是同一块内存地址。")])])}),[],!1,null,null,null);t.default=_.exports}}]);