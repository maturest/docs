(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{319:function(a,e,s){"use strict";s.r(e);var t=s(14),l=Object(t.a)({},(function(){var a=this,e=a._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"列表元组的操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#列表元组的操作"}},[a._v("#")]),a._v(" 列表元组的操作")]),a._v(" "),e("ul",[e("li",[a._v("len 在列表元组中的使用")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("names = ['张三','李四']\nlength = len(names)\n")])])]),e("ul",[e("li",[a._v("列表之间的累加与乘法")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("names = ['张三','李四']\nnew_names = names + names\nprint(new_names)\n\nnew_names = names * 2\nprint(new_names)\n")])])]),e("ul",[e("li",[a._v("in 与 not in 在列表或元组中的使用")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("names = ['张三','李四']\nname = '张三'\nprint(name in names)\nprint(name not in names)\n")])])]),e("ul",[e("li",[a._v("append 在尾部添加元素")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("list.append(new_item)\n")])])]),e("ul",[e("li",[a._v("insert 将元素添加到指定位置")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("fruits = ['apple','banana']\nfruits.inster(1,'orange')\n")])])]),e("ul",[e("li",[a._v("count 想要查询个数的元素")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("list.count(item)\n")])])]),e("ul",[e("li",[a._v("remove 删除列表中的某个元素,有多个元素的话，删除第一个")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("list.remove(item)\n")])])]),e("ul",[e("li",[a._v("del 把变量完全删除")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("drinks = ['雪碧','可乐','芬达']\ndel drinks\n")])])]),e("ul",[e("li",[a._v("reverse 对当前的列表顺序进行反转")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("list.reverse()\n")])])]),e("ul",[e("li",[a._v("sort 对当前列表按照制定规则进行排序")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("list.sort(cmp,key,reverse)\n")])])]),e("ul",[e("li",[a._v("clear 将当前列表进行清空")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("list.clear()\n")])])]),e("ul",[e("li",[a._v("copy 将当前列表复制一份新的列表")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("list.copy()\n")])])]),e("p",[a._v("二次赋值的变量与原始变量享有相同的内存空间")]),a._v(" "),e("p",[a._v("copy函数创建的新列表与原始类表不是一个内存空间，不同享数据变更。")]),a._v(" "),e("p",[a._v("copy 属于浅拷贝，通俗的说，我们有一个列表a,列表里的元素还是列表，当我们拷贝出新列表b后，无论是a还是b的内部的列表的数据发生变化后，相互之间都会受到影响。")]),a._v(" "),e("p",[a._v("深拷贝对第一层数据进行了 copy,对深层的数据也进行了 copy,原始变量和新变量完全全不共享数据")]),a._v(" "),e("ul",[e("li",[a._v("extend 将其他列表或元组中的元素导入到当前列表中")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("list.extend(iterable)\n")])])])])}),[],!1,null,null,null);e.default=l.exports}}]);